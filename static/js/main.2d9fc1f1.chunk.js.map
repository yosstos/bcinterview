{"version":3,"sources":["FormParking.js","ParkingRecipt.js","AdminPanel.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","container","display","button","backgroundColor","color","marginTop","padding","borderRadius","FormParking","props","classes","useState","fullName","setFullName","carNumber","setCarNumber","carType","setCarType","Date","toLocaleDateString","times","updateDetails","goAdmin","Typography","variant","Grid","item","xs","sm","md","TextField","label","value","onChange","e","target","fullWidth","margin","Button","className","onClick","inline","alignItems","justifyContent","details","valueText","placeSelf","width","purpleText","ParkingRecipt","isOpen","setIsOpen","goBack","place","IconButton","prev","ExpandMore","ExpandLess","Collapse","in","timeout","unmountOnExit","Divider","height","out","cardStyle","textAlign","reddot","greendot","centerTraffic","AdminPanel","Items","isFull","parking","findIndex","park","isTaken","map","i","key","spotName","Card","justify","alignContent","direction","spacing","flexDirection","App","history","useHistory","setDetails","parking2","push","setParking","chooseParking","ind","name","parks","path","obj","console","log","replace","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2d9fc1f1.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport {\r\n  Button,\r\n  Grid,\r\n  TextField,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\n//import { ExpandLess, ExpandMore } from \"@material-ui/icons\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\n//import { ExpandMoreIcon } from \"@material-ui/icons\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    display: \"flex\",\r\n/*     width: \"40vw\",\r\n    height: \"50vh\",\r\n    flexDirection: \"column\",\r\n    marginTop: \"10vh\",\r\n    marginLeft: \"30vw\" */\r\n  },\r\n  button: {\r\n      //width: '100%',\r\n      backgroundColor: 'purple',\r\n      color: 'white',\r\n      marginTop: '1vh',\r\n      padding: '14px',\r\n      borderRadius: '2rem',\r\n      \"&:hover\": {\r\n        backgroundColor: '#560156',\r\n        \r\n\r\n    },\r\n\r\n  }\r\n}));\r\n\r\nexport default function FormParking(props) {\r\n  const classes = useStyles();\r\n  const [fullName, setFullName] = useState(\"\");\r\n  const [carNumber, setCarNumber] = useState(\"\"); //regexp for validation\r\n  const [carType, setCarType] = useState(\"\");\r\n  const [times, setTimes] = useState(new Date().toLocaleDateString());\r\n  const { updateDetails, goAdmin } = props;\r\n\r\n  return (<>\r\n    <Typography variant={'h2'}>Register</Typography>\r\n    <br />\r\n    <Grid item xs={10} sm={6} md={3}>\r\n        \r\n        <TextField\r\n          label=\"Full Name\"\r\n          variant=\"outlined\"\r\n          value={fullName}\r\n          onChange={(e) => setFullName(e.target.value)}\r\n          fullWidth\r\n          margin=\"normal\"\r\n        />\r\n        <TextField\r\n          label=\"Car Number\"\r\n          variant=\"outlined\"\r\n          value={carNumber}\r\n          fullWidth\r\n          margin=\"normal\"\r\n          onChange={(e) => setCarNumber(e.target.value)}\r\n        />\r\n        <TextField\r\n          label=\"Car Type\"\r\n          variant=\"outlined\"\r\n          value={carType}\r\n          fullWidth\r\n          margin=\"normal\"\r\n          onChange={(e) => setCarType(e.target.value)}\r\n        />\r\n        <Button fullWidth className={classes.button} \r\n          onClick={() => {\r\n            updateDetails({\r\n              fullName: fullName,\r\n              carNumber: carNumber,\r\n              carType: carType,\r\n              times: times\r\n            });\r\n          }}\r\n        >\r\n          Get parking number\r\n        </Button>\r\n        <Button fullWidth className={classes.button} \r\n          onClick={goAdmin}\r\n        >\r\n          Go to admin\r\n        </Button>\r\n    </Grid>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nimport {\r\n  Button,\r\n  Grid,\r\n  TextField,\r\n  Typography,\r\n  Collapse,\r\n  Divider,\r\n  IconButton\r\n} from \"@material-ui/core\";\r\nimport {ExpandMore, ExpandLess}  from \"@material-ui/icons\";\r\n\r\nimport { makeStyles } from \"@material-ui/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    inline: {\r\n        display: 'flex',\r\n        marginTop: '1vh',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n    },\r\n    details: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n    valueText: {\r\n        placeSelf: \"flex-end\",\r\n    },\r\n    container: {\r\n        width: \"50vw\",\r\n    },\r\n    button: {\r\n        margin: \"2vh\",\r\n        color: 'white',\r\n        marginTop: '1vh',\r\n        padding: '14px',\r\n        borderRadius: '2rem',\r\n        backgroundColor: 'purple',\r\n        \"&:hover\": {\r\n            backgroundColor: '#560156',\r\n            \r\n\r\n        },\r\n    },\r\n    purpleText: {\r\n        color: 'purple'\r\n    }\r\n}));\r\n\r\nexport default function ParkingRecipt(props) {\r\n    const classes = useStyles();\r\n\r\n  const [isOpen, setIsOpen] = useState(true);\r\n  const { details, goBack } = props;\r\n  //let place = chooseParking(details.carNumber);\r\n  return (\r\n    <>\r\n    <Grid item className={classes.container}>\r\n    \r\n      <Typography className={classes.purpleText}>Created on: {new Date().toLocaleDateString()} </Typography>\r\n      <Typography>Parking: {details.place}</Typography>\r\n    <Grid item className={classes.details}>\r\n      <Typography className={classes.purpleText}>Hide Details </Typography>\r\n      <IconButton onClick={() => setIsOpen((prev) => !prev)}>\r\n        {isOpen ? <ExpandMore className={classes.purpleText} /> : <ExpandLess className={classes.purpleText}/>}\r\n      </IconButton>\r\n      </Grid>\r\n      <Collapse in={isOpen} timeout=\"auto\" unmountOnExit>\r\n        <Grid item className={classes.inline}>\r\n        <Typography className={classes.purpleText}>Full Name:</Typography>\r\n        <Typography className={classes.valueText}>{details.fullName}</Typography>\r\n        </Grid>\r\n        <Divider />\r\n\r\n        <Grid item className={classes.inline}>\r\n        <Typography className={classes.purpleText}>Car Number:</Typography>\r\n        <Typography>{details.carNumber}</Typography>\r\n        </Grid>\r\n        <Divider />\r\n\r\n        <Grid item className={classes.inline}>\r\n        <Typography className={classes.purpleText}>Car Type:</Typography>\r\n        <Typography>{details.carType}</Typography>\r\n        </Grid>\r\n        <Divider />\r\n\r\n      </Collapse>\r\n      </Grid>\r\n      <Button className={classes.button} onClick={goBack}> Go Back </Button>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Card, Grid, Typography, Button } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    display: \"flex\",\r\n    height: \"80%\",\r\n  },\r\n  out: {\r\n    display: \"flex\",\r\n    height: \"100vh\",\r\n  },\r\n  cardStyle: {\r\n      height: '20vh',\r\n      width: '7vw',\r\n      textAlign: 'center',\r\n  },\r\n  button: {\r\n    margin: \"2vh\",\r\n    color: 'white',\r\n    marginTop: '1vh',\r\n    padding: '14px',\r\n    borderRadius: '2rem',\r\n    backgroundColor: 'purple',\r\n    \"&:hover\": {\r\n        backgroundColor: '#560156',\r\n        \r\n\r\n    },\r\n    \r\n},\r\n    reddot: {\r\n    height: '50px',\r\n    width: '50px',\r\n    backgroundColor: 'red',\r\n    borderRadius: '50%',\r\n    display: 'inline-block',\r\n\r\n  },\r\n  greendot: {\r\n    height: '50px',\r\n    width: '50px',\r\n    backgroundColor: 'green',\r\n    borderRadius: '50%',\r\n    display: 'inline-block',\r\n  },\r\n  centerTraffic: {\r\n    textAlign: 'center',\r\n  }\r\n}));\r\n\r\nexport default function AdminPanel(props) {\r\n  const classes = useStyles();\r\n\r\n  \r\n\r\n  const Items = () => {\r\n      let isFull = (props.parking.findIndex((park) => !park.isTaken) === -1) ? true : false;\r\n    return props.parking.map((park, i) => {\r\n        return (\r\n            <>\r\n            {i%10 ? (<></>) : (<Grid item xs={1} className={classes.centerTraffic}>\r\n                <span className={ `${isFull ? classes.reddot : classes.greendot}`} />\r\n            </Grid>)}\r\n            <Grid key={park.spotName} item xs={1}>\r\n                <Card className={classes.cardStyle}>\r\n                    <Typography variant='h4'>{park.spotName}</Typography>\r\n                    <Typography>{park.carNumber}</Typography>\r\n                </Card>\r\n            </Grid>\r\n            </>\r\n        )\r\n    })\r\n    \r\n  }\r\n\r\n  return (\r\n    <Grid container\r\n    className={classes.out}\r\n      alignItems={\"center\"}\r\n      justify={\"center\"}\r\n      alignContent={\"center\"}\r\n      direction=\"row\">\r\n\r\n      <Grid container item xs={12} spacing={2}\r\n      className={classes.container}\r\n        alignItems={\"center\"}\r\n        justify={\"center\"}\r\n        alignContent={\"center\"}\r\n        direction=\"row\">\r\n           <Items />\r\n      </Grid>\r\n      <Grid item xs={3} >\r\n      <Button fullWidth className={classes.button} onClick={props.goBack}>back</Button>\r\n      </Grid>\r\n      </Grid>\r\n\r\n  )\r\n}\r\n","import React, { useState } from \"react\";\r\nimport FormParking from \"./FormParking\";\r\nimport ParkingRecipt from \"./ParkingRecipt\";\r\nimport AdminPanel from \"./AdminPanel\";\r\n\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport { BrowserRouter as Router, Switch, Route, Link, useHistory } from \"react-router-dom\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    display: \"flex\",\r\n    height: \"100vh\",\r\n    flexDirection: \"column\",\r\n  },\r\n}));\r\nexport default function App() {\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n\r\n  const [details, setDetails] = useState({});\r\n\r\n  const [showForm, setShowForm] = useState(true);\r\n  const handleShowForm = () => {\r\n    setShowForm((prev) => !prev);\r\n  };\r\n  const parking2 = [];\r\n  for (let i = 0; i < 20; i++) {\r\n    parking2.push({ spotName: \"B\" + i, isTaken: false, carNumber: \"\" });\r\n  }\r\n  const [parking, setParking] = useState([...parking2]);\r\n  const updateDetails = (obj) => {\r\n    setDetails({ ...obj, place: chooseParking(obj.carNumber) });\r\n    console.log(history, \"history\");\r\n    history.replace('/recipt');\r\n  };\r\n  const chooseParking = (carNumber) => {\r\n    //console.log(parking, \"what\");\r\n    let ind = parking.findIndex((park) => !park.isTaken);\r\n    //console.log(ind, \"why\");\r\n\r\n    if (ind >= 0) {\r\n      let name = parking[ind].spotName;\r\n      let parks = parking;\r\n      parks[ind] = { ...parks[ind], isTaken: true, carNumber: carNumber };\r\n      setParking([...parks]);\r\n      //console.log(ind, parking, parking[ind].spotName);\r\n      return name;\r\n    }\r\n    return \"none\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Switch>\r\n        \r\n        <Route path=\"/recipt\">\r\n          <Grid\r\n            container\r\n            direction=\"column\"\r\n            className={classes.container}\r\n            alignItems={\"center\"}\r\n            justify={\"center\"}\r\n            alignContent={\"center\"}\r\n          >\r\n            <ParkingRecipt details={details} goBack={() => history.push(\"/\")} />\r\n          </Grid>\r\n        </Route>\r\n        <Route path=\"/admin\">\r\n          <AdminPanel parking={parking} goBack={() => history.push(\"/\")} />\r\n        </Route>\r\n        <Route path=\"/\">\r\n          <Grid\r\n            container\r\n            direction=\"column\"\r\n            className={classes.container}\r\n            alignItems={\"center\"}\r\n            justify={\"center\"}\r\n            alignContent={\"center\"}\r\n          >\r\n            <FormParking updateDetails={updateDetails} goAdmin={() => history.push(\"/admin\")} />\r\n          </Grid>\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter as Router} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n\r\n  <React.StrictMode>\r\n    <Router>\r\n    <App />\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}